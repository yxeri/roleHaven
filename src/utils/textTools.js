'use strict';
const allowedRegex = /^[\w\d-_]+$/;
const fullTextRegex = /^[\w\d\såäöÅÄÖ_-]+$/;
function findOneReplace(text, find, replaceWith) {
    return text.replace(new RegExp(find), replaceWith);
}
function hasAllowedText(text) {
    return allowedRegex.test(text);
}
function isAllowedFull(text) {
    return fullTextRegex.test(text);
}
function cleanText(text) {
    const modifiedText = [];
    for (let i = 0; i < text.length; i += 1) {
        if (i === 0 && text[0] !== '') {
            modifiedText.push(text[0]);
        }
        else if (!(text[i - 1] === '' && text[i] === '') && !(i + 1 === text.length && text[i] === '')) {
            modifiedText.push(text[i]);
        }
    }
    return modifiedText;
}
function convertToBoolean(envar) {
    if (envar) {
        return envar === 'true';
    }
    return undefined;
}
function convertToFloat(float) {
    const parsedFloat = parseFloat(float);
    return Number.isNaN(parsedFloat)
        ?
            0
        :
            parsedFloat;
}
function convertToInt(int) {
    const parsedInt = parseInt(int, 10);
    return Number.isNaN(parsedInt)
        ?
            0
        :
            parsedInt;
}
function shuffleArray(array) {
    const shuffledArray = array;
    let currentIndex = array.length;
    let tempVal;
    let randIndex;
    while (currentIndex !== 0) {
        randIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        tempVal = array[currentIndex];
        shuffledArray[currentIndex] = array[randIndex];
        shuffledArray[randIndex] = tempVal;
    }
    return shuffledArray;
}
function getDifference({ firstDate, laterDate, }) {
    const difference = new Date(laterDate) - new Date(firstDate);
    return new Date(difference);
}
function isValidMail(address) {
    return /^[-!#$%&'*+/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-?\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/.test(address);
}
function calculateMinutesDifference({ firstDate, secondDate, }) {
    const difference = new Date(firstDate) - new Date(secondDate);
    return Math.floor((difference / 1000) / 60);
}
function generateTextCode(amount = 8) {
    return shuffleArray(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'D', 'E', 'F', 'G', 'H', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        .slice(0, amount)
        .join('');
}
function trimSpace(sentText) {
    return findOneReplace(sentText, /^\s+|\s+$/, '');
}
function buildFileName({ name, }) {
    return `${Date.now()}-${name.replace(/[^\w.]/g, '-')}`;
}
export default {
    hasAllowedText,
    isAllowedFull,
    cleanText,
    convertToBoolean,
    convertToFloat,
    convertToInt,
    shuffleArray,
    getDifference,
    isValidMail,
    calculateMinutesDifference,
    generateTextCode,
    trimSpace,
    buildFileName,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dFRvb2xzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGV4dFRvb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUNuQyxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQztBQVM1QyxTQUFTLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVc7SUFDN0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFPRCxTQUFTLGNBQWMsQ0FBQyxJQUFJO0lBQzFCLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBT0QsU0FBUyxhQUFhLENBQUMsSUFBSTtJQUN6QixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQU9ELFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDckIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBRXhCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzlCLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsQ0FBQzthQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJ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