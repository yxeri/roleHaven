'use strict';
import { dbConfig } from 'src/config/defaults/index.js';
async function getUserSocket({ io, socketId, }) {
    const sockets = await io.sockets.fetchSockets();
    return sockets.find((socket) => socket.id === socketId);
}
async function getSocketsByRoom({ io, roomId, }) {
    return await io.sockets.in(roomId).fetchSockets();
}
async function joinRooms({ roomIds, io, socketId, userId, }) {
    const userSocket = await getUserSocket({
        io,
        socketId,
    });
    if (userSocket) {
        roomIds.forEach((roomId) => userSocket.join(roomId));
        userSocket.join(userId);
    }
    return userSocket;
}
async function joinRequiredRooms({ io, socketId, userId, socket, accessLevel, }) {
    const userSocket = socket ?? await getUserSocket({
        io,
        socketId,
    });
    if (userSocket) {
        dbConfig.requiredRooms.forEach((roomId) => userSocket.join(roomId));
        if (userId) {
            userSocket.join(userId);
        }
        if (accessLevel) {
            for (let i = 0; i <= accessLevel; i += 1) {
                userSocket.join(i.toString());
            }
        }
    }
    return userSocket;
}
async function joinAliasRooms({ io, socketId, aliases, }) {
    const userSocket = await getUserSocket({
        io,
        socketId,
    });
    if (userSocket) {
        aliases.forEach((aliasId) => userSocket.join(aliasId));
    }
    return userSocket;
}
async function leaveRooms({ roomIds, io, socketId, }) {
    const userSocket = await getUserSocket({
        io,
        socketId,
    });
    if (userSocket) {
        roomIds.forEach((roomId) => userSocket.join(roomId));
    }
    return userSocket;
}
export default {
    getUserSocket,
    getSocketsByRoom,
    joinRooms,
    leaveRooms,
    joinRequiredRooms,
    joinAliasRooms,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0SW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzb2NrZXRJby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFLYixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFeEQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUMzQixFQUFFLEVBQ0YsUUFBUSxHQUlUO0lBQ0MsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBRWhELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEVBQzlCLEVBQUUsRUFDRixNQUFNLEdBSVA7SUFDQyxPQUFPLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQUMsRUFDdkIsT0FBTyxFQUNQLEVBQUUsRUFDRixRQUFRLEVBQ1IsTUFBTSxHQU1QO0lBQ0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxhQUFhLENBQUM7UUFDckMsRUFBRTtRQUNGLFFBQVE7S0FDVCxDQUFDLENBQUM7SUFHSCxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3JELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFDL0IsRUFBRSxFQUNGLFFBQVEsRUFDUixNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsR0FPWjtJQUNDLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxNQUFNLGFBQWEsQ0FBQztRQUMvQyxFQUFFO1FBQ0YsUUFBUTtLQUNULENBQUMsQ0FBQztJQUVILElBQUksVUFBVSxFQUFFLENBQUM7UUFDZixRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXBFLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFFRCxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUN6QyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLEVBQzVCLEVBQUUsRUFDRixRQUFRLEVBQ1IsT0FBTyxHQUtSO0lBQ0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxhQUFhLENBQUM7UUFDckMsRUFBRTtRQUNGLFFBQVE7S0FDVCxDQUFDLENBQUM7SUFFSCxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQsS0FBSyxVQUFVLFVBQVUsQ0FBQyxFQUN4QixPQUFPLEVBQ1AsRUFBRSxFQUNGLFFBQVEsR0FLVDtJQUNDLE1BQU0sVUFBVSxHQUFHLE1BQU0sYUFBYSxDQUFDO1FBQ3JDLEVBQUU7UUFDRixRQUFRO0tBQ1QsQ0FBQyxDQUFDO0lBRUgsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELGVBQWU7SUFDYixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxVQUFVO0lBQ1YsaUJBQWlCO0lBQ2pCLGNBQWM7Q0FDZixDQUFDIn0=