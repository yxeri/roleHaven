'use strict';
import mongoose from 'mongoose';
import dbConnector from 'src/db/databaseConnector.js';
import errorCreator from 'src/error/errorCreator.js';
const docFileSchema = new mongoose.Schema({
    code: {
        type: String,
        unique: true,
    },
    title: {
        type: String,
        unique: true,
    },
    text: [String],
    videoCodes: [String],
    images: [dbConnector.imageSchema],
}, { collection: 'docFiles' });
const DocFile = mongoose.model('DocFile', docFileSchema);
async function updateObject({ docFileId, update, }) {
    const { error, data } = await dbConnector.updateObject({
        update,
        query: { _id: docFileId },
        object: DocFile,
        errorNameContent: 'updateDocFile',
    });
    if (error) {
        return { error };
    }
    if (!data?.object) {
        return { error: new errorCreator.DoesNotExist({ name: `docFile ${docFileId}` }) };
    }
    return { data: { docFile: data.object } };
}
async function getDocFiles({ query, filter, }) {
    const { error, data } = await dbConnector.getObjects({
        query,
        filter,
        object: DocFile,
    });
    if (error) {
        return { error };
    }
    return { data: { docFiles: data?.objects } };
}
async function getDocFile({ query, filter, }) {
    const { error, data } = await dbConnector.getObject({
        query,
        filter,
        object: DocFile,
    });
    if (error) {
        return { error };
    }
    if (!data.object) {
        return { error: new errorCreator.DoesNotExist({ name: `docFile ${JSON.stringify(query, null, 4)}` }) };
    }
    return { data: { docFile: data.object } };
}
async function doesDocFileExist({ title, code, }) {
    const query = { $or: [] };
    if (title) {
        query.$or.push({ title });
    }
    if (code) {
        query.$or.push({ code });
    }
    return dbConnector.doesObjectExist({
        query,
        object: DocFile,
    });
}
async function createDocFile({ docFile, }) {
    const { error, data } = await doesDocFileExist({
        code: docFile.code,
        title: docFile.title,
    });
    if (error) {
        return { error };
    }
    if (data.exists) {
        return { error: new errorCreator.AlreadyExists({ name: `Docfile ${docFile.code} ${docFile.title}` }) };
    }
    const { error: saveError, data: saveData } = await dbConnector.saveObject({
        object: DocFile,
        objectData: docFile,
        objectType: 'docFile',
    });
    if (saveError) {
        return { error: saveError };
    }
    return { data: { docFile: saveData.savedObject } };
}
async function updateDocFile({ docFileId, docFile, options = {}, }) {
    const { resetOwnerAliasId } = options;
    const { text, title, visibility, isPublic, ownerAliasId, } = docFile;
    const update = {};
    const set = {};
    const unset = {};
    if (text) {
        set.text = text;
    }
    if (title) {
        set.title = title;
    }
    if (visibility) {
        set.visibility = visibility;
    }
    if (typeof isPublic === 'boolean') {
        set.isPublic = isPublic;
    }
    if (resetOwnerAliasId) {
        unset.ownerAliasId = '';
    }
    else if (ownerAliasId) {
        set.ownerAliasId = ownerAliasId;
    }
    if (Object.keys(set).length > 0) {
        update.$set = set;
    }
    if (Object.keys(unset).length > 0) {
        update.$unset = unset;
    }
    return updateObject({
        docFileId,
        update,
    });
}
async function removeDocFile({ docFileId, }) {
    const query = { _id: docFileId };
    return dbConnector.removeObject({
        query,
        object: DocFile,
    });
}
async function getAllDocFiles() {
    return getDocFiles({
        query: {},
    });
}
async function getDocFileById({ docFileId, }) {
    return getDocFile({
        query: { _id: docFileId },
    });
}
async function getDocFileByCode({ code, }) {
    return getDocFile({
        query: { code },
    });
}
async function getDocFilesByUser({ user, }) {
    const query = dbConnector.createUserQuery({ user });
    return getDocFiles({
        query,
    });
}
async function getDocFilesList() {
    return getDocFiles({
        query: {},
    });
}
export default {
    createDocFile,
    updateDocFile,
    getDocFileById,
    removeDocFile,
    getAllDocFiles,
    getDocFileByCode,
    getDocFilesByUser,
    getDocFilesList,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY0ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBRWhDLE9BQU8sV0FBd0MsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRixPQUFPLFlBQVksTUFBTSwyQkFBMkIsQ0FBQztBQVVyRCxNQUFNLGFBQWEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQWdCO0lBQ3ZELElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLElBQUk7S0FDYjtJQUNELEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLElBQUk7S0FDYjtJQUNELElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNkLFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNwQixNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO0NBQ2xDLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUUvQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUV6RCxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQzFCLFNBQVMsRUFDVCxNQUFNLEdBSVA7SUFDQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sV0FBVyxDQUFDLFlBQVksQ0FBQztRQUNyRCxNQUFNO1FBQ04sS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRTtRQUN6QixNQUFNLEVBQUUsT0FBTztRQUNmLGdCQUFnQixFQUFFLGVBQWU7S0FDbEMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNWLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxDQUFDLElB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