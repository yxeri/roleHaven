'use strict';
import mongoose from 'mongoose';
import dbConnector, { BaseSchemaDef } from 'src/db/databaseConnector.js';
import ErrorCreator from 'src/error/errorCreator.js';
import errorCreator from 'src/error/errorCreator.js';
const simpleMsgSchema = new mongoose.Schema({
    ...BaseSchemaDef,
    text: String,
}, { collection: 'simpleMsgs' });
const SimpleMsg = mongoose.model('SimpleMsg', simpleMsgSchema);
async function updateObject({ update, simpleMsgId, }) {
    const { error, data } = await dbConnector.updateObject({
        update,
        query: { _id: simpleMsgId },
        object: SimpleMsg,
        errorNameContent: 'updateSimpleMsg',
    });
    if (error) {
        return { error };
    }
    if (!data?.object) {
        return { error: new ErrorCreator.DoesNotExist({ name: `Simple msg ${simpleMsgId}` }) };
    }
    return { data: { simpleMsg: data.object } };
}
async function createSimpleMsg({ simpleMsg, }) {
    const { error, data } = await dbConnector.saveObject({
        object: SimpleMsg,
        objectData: simpleMsg,
        objectType: 'Simple msg',
    });
    if (error) {
        return { error };
    }
    return { data: { simpleMsg: data.savedObject } };
}
async function getSimpleMsgs({ query, filter, }) {
    const { error, data } = await dbConnector.getObjects({
        query,
        filter,
        object: SimpleMsg,
    });
    if (error) {
        return { error };
    }
    return {
        data: {
            simpleMsgs: data?.objects,
        },
    };
}
async function getSimpleMsg({ query, }) {
    const { error, data } = await dbConnector.getObject({
        query,
        object: SimpleMsg,
    });
    if (error) {
        return { error };
    }
    if (!data.object) {
        return { error: new errorCreator.DoesNotExist({ name: `simpleMsg ${JSON.stringify(query, null, 4)}` }) };
    }
    return { data: { simpleMsg: data.object } };
}
async function removeSimpleMsgsByUser({ userId, }) {
    return dbConnector.removeObjects({
        object: SimpleMsg,
        query: { userId },
    });
}
async function removeSimpleMsg({ simpleMsgId, }) {
    return dbConnector.removeObject({
        object: SimpleMsg,
        query: { _id: simpleMsgId },
    });
}
async function getAllSimpleMsgs() {
    return getSimpleMsgs({
        query: {},
    });
}
async function updateSimpleMsg({ simpleMsgId, simpleMsg, }) {
    const { text } = simpleMsg;
    const update = { $set: {} };
    if (text) {
        update.$set.text = text;
    }
    return updateObject({
        update,
        simpleMsgId,
    });
}
async function getSimpleMsgById({ simpleMsgId, }) {
    return getSimpleMsg({
        query: { _id: simpleMsgId },
    });
}
export default {
    createSimpleMsg,
    removeSimpleMsgsByUser,
    getAllSimpleMsgs,
    updateSimpleMsg,
    getSimpleMsgById,
    removeSimpleMsg,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlTXNnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2ltcGxlTXNnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUNoQyxPQUFPLFdBQVcsRUFBRSxFQUFjLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JGLE9BQU8sWUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sWUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBTXJELE1BQU0sZUFBZSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBa0I7SUFDM0QsR0FBRyxhQUFhO0lBQ2hCLElBQUksRUFBRSxNQUFNO0NBQ2IsRUFBRSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRS9ELEtBQUssVUFBVSxZQUFZLENBQUMsRUFDMUIsTUFBTSxFQUNOLFdBQVcsR0FJWjtJQUNDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQ3JELE1BQU07UUFDTixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFO1FBQzNCLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLGdCQUFnQixFQUFFLGlCQUFpQjtLQUNwQyxDQUFDLENBQUM7SUFFSCxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFD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