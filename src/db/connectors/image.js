'use strict';
import mongoose from 'mongoose';
import errorCreator from '../../error/errorCreator';
import dbConnector from '../databaseConnector';
const imageSchema = new mongoose.Schema(dbConnector.createSchema({
    imageName: String,
    fileName: String,
    width: Number,
    height: Number,
}), { collection: 'images' });
const Image = mongoose.model('Image', imageSchema);
function updateObject({ imageId, update, callback, }) {
    dbConnector.updateObject({
        update,
        object: Image,
        query: { _id: imageId },
        errorNameContent: 'updateImageObject',
        callback: ({ error, data, }) => {
            if (error) {
                callback({ error });
                return;
            }
            callback({ data: { image: data.object } });
        },
    });
}
function updateImage({ imageId, image, callback, options = {}, }) {
    const { resetOwnerAliasId } = options;
    const { imageName, width, height, ownerAliasId, isPublic, } = image;
    const update = {
        $set: {
            imageName,
            width,
            height,
        },
    };
    const unset = {};
    if (resetOwnerAliasId) {
        unset.ownerAliasId = '';
    }
    else if (ownerAliasId) {
        update.$set.ownerAliasId = ownerAliasId;
    }
    if (typeof isPublic === 'boolean') {
        update.$set.isPublic = isPublic;
    }
    if (Object.keys(unset).length > 0) {
        update.$unset = unset;
    }
    updateObject({
        update,
        imageId,
        callback,
    });
}
function getImages({ query, callback, }) {
    dbConnector.getObjects({
        query,
        object: Image,
        callback: ({ error, data, }) => {
            if (error) {
                callback({ error });
                return;
            }
            callback({
                data: {
                    images: data.objects,
                },
            });
        },
    });
}
function getImage({ query, callback, }) {
    dbConnector.getObject({
        query,
        object: Image,
        callback: ({ error, data, }) => {
            if (error) {
                callback({ error });
                return;
            }
            if (!data.object) {
                callback({ error: new errorCreator.DoesNotExist({ name: `image ${JSON.stringify(query, null, 4)}` }) });
                return;
            }
            callback({ data: { image: data.object } });
        },
    });
}
function createImage({ image, callback, }) {
    dbConnector.saveObject({
        object: new Image(image),
        objectType: 'image',
        callback: ({ error, data, }) => {
            if (error) {
                callback({ error });
                return;
            }
            callback({ data: { image: data.savedObject } });
        },
    });
}
function updateAccess(params) {
    const accessParams = params;
    const { callback } = params;
    accessParams.objectId = params.imageId;
    accessParams.object = Image;
    accessParams.callback = ({ error, data, }) => {
        if (error) {
            callback({ error });
            return;
        }
        callback({ data: { image: data.object } });
    };
    if (params.shouldRemove) {
        dbConnector.removeObjectAccess(params);
    }
    else {
        dbConnector.addObjectAccess(params);
    }
}
function getAllImages({ callback }) {
    getImages({ callback });
}
function getImagesByUser({ userId, callback, }) {
    const query = {
        $or: [
            { ownerId: userId },
            { userIds: { $in: [userId] } },
        ],
    };
    getImages({
        query,
        callback,
    });
}
function getImageById({ imageId, callback, }) {
    getImage({
        callback,
        query: { _id: imageId },
    });
}
function removeImage({ imageId, callback, }) {
    dbConnector.removeObject({
        callback,
        object: Image,
        query: { _id: imageId },
    });
}
export { updateAccess };
export { updateImage };
export { getAllImages as getAllDevices };
export { createImage as createDevice };
export { getImagesByUser };
export { getImageById as getDeviceById };
export { removeImage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixPQUFPLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxZQUFZLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDL0QsU0FBUyxFQUFFLE1BQU07SUFDakIsUUFBUSxFQUFFLE1BQU07SUFDaEIsS0FBSyxFQUFFLE1BQU07SUFDYixNQUFNLEVBQUUsTUFBTTtDQUNmLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBRTlCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBU25ELFNBQVMsWUFBWSxDQUFDLEVBQ3BCLE9BQU8sRUFDUCxNQUFNLEVBQ04sUUFBUSxHQUNUO0lBQ0MsV0FBVyxDQUFDLFlBQVksQ0FBQztRQUN2QixNQUFNO1FBQ04sTUFBTSxFQUFFLEtBQUs7UUFDYixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFO1FBQ3ZCLGdCQUFnQixFQUFFLG1CQUFtQjtRQUNyQyxRQUFRLEVBQUUsQ0FBQyxFQUNULEtBQUssRUFDTCxJQUFJLEdBQ0wsRUFBRSxFQUFFO1lBQ0gsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDVixRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUVwQixPQUFPO1lBQ1QsQ0FBQztZQUVELFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBVUQsU0FBUyxXQUFXLENBQUMsRUFDbkIsT0FBTyxFQUNQLEtBQUssRUFDTCxRQUFRLEVBQ1IsT0FBTyxHQUFHLEVBQUUsR0FDYjtJQUNDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUN0QyxNQUFNLEVBQ0osU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFFBQVEsR0FDVCxHQUFHLEtBQUssQ0FBQztJQUNWLE1BQU0sTUFBTSxHQUFHO1FBQ2IsSUFBSSxFQUFFO1lBQ0osU0FBUztZQUNULEtBQUs7WUFDTCxNQUFNO1NBQ1A7S0FDRixDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBRWpCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO1NBQU0sSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUksT0FBTyxRQUFRLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxZQUFZLENBQUM7UUFDWCxNQUFNO1FBQ04sT0FBTztRQUNQLFFBQVE7S0FDVCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUUQsU0FBUyxTQUFTLENBQUMsRUFDakIsS0FBSyxFQUNMLFFBQVEsR0FDVDtJQUNDLFdBQVcsQ0FBQyxVQUFVLENBQUM7UUFDckIsS0FBSztRQUNMLE1BQU0sRUFBRSxLQUFLO1FBQ2IsUUFBUSxFQUFFLENBQUMsRUFDVCxLQUFLLEVBQ0wsSUFBSSxHQUNMLEVBQUUsRUFBRTtZQUNILElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ1YsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFFcEIsT0FBTztZQUNULENBQUM7WUFFRCxRQUFRLENBQUM7Z0JBQ1AsSUFBSSxFQUFFO29CQUNKLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDckI7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVFELFNBQVMsUUFBUSxDQUFDLEVBQ2hCLEtBQUssRUFDTCxRQUFRLEdBQ1Q7SUFDQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3BCLEtBQUs7UUFDTCxNQUFNLEVBQUUsS0FBSztRQUNiLFFBQVEsRUFBRSxDQUFDLEVBQ1QsS0FBSyxFQUNMLElBQUksR0FDTCxFQUFFLEVBQUU7WUFDSCxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUNWLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBRXBCLE9BQU87WUFDVCxDQUFDO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDakIsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRXhHLE9BQU87WUFDVCxDQUFDO1lBRUQsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0MsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFRRCxTQUFTLFdBQVcsQ0FBQyxFQUNuQixLQUFLLEVBQ0wsUUFBUSxHQUNUO0lBQ0MsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUNyQixNQUFNLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3hCLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFFBQVEsRUFBRSxDQUFDLEVBQ1QsS0FBSyxFQUNMLElBQUksR0FDTCxFQUFFLEVBQUU7WUFDSCxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUNWLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBRXBCLE9BQU87WUFDVCxDQUFDO1lBRUQsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEQsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFhRCxTQUFTLFlBQVksQ0FBQyxNQUFNO0lBQzFCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQztJQUM1QixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQzVCLFlBQVksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUN2QyxZQUFZLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUM1QixZQUFZLENBQUMsUUFBUSxHQUFHLENBQUMsRUFDdkIsS0FBSyxFQUNMLElBQUksR0FDTCxFQUFFLEVBQUU7UUFDSCxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUVwQixPQUFPO1FBQ1QsQ0FBQztRQUVELFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hCLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO1NBQU0sQ0FBQztRQUNOLFdBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztBQUNILENBQUM7QUFPRCxTQUFTLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBRTtJQUNoQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFRRCxTQUFTLGVBQWUsQ0FBQyxFQUN2QixNQUFNLEVBQ04sUUFBUSxHQUNUO0lBQ0MsTUFBTSxLQUFLLEdBQUc7UUFDWixHQUFHLEVBQUU7WUFDSCxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7WUFDbkIsRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1NBQy9CO0tBQ0YsQ0FBQztJQUVGLFNBQVMsQ0FBQztRQUNSLEtBQUs7UUFDTCxRQUFRO0tBQ1QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQVFELFNBQVMsWUFBWSxDQUFDLEVBQ3BCLE9BQU8sRUFDUCxRQUFRLEdBQ1Q7SUFDQyxRQUFRLENBQUM7UUFDUCxRQUFRO1FBQ1IsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtLQUN4QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUUQsU0FBUyxXQUFXLENBQUMsRUFDbkIsT0FBTyxFQUNQLFFBQVEsR0FDVDtJQUNDLFdBQVcsQ0FBQyxZQUFZLENBQUM7UUFDdkIsUUFBUTtRQUNSLE1BQU0sRUFBRSxLQUFLO1FBQ2IsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtLQUN4QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLElBQUksWUFBWSxFQUFFLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDO0FBQzNCLE9BQU8sRUFBRSxZQUFZLElBQUksYUFBYSxFQUFFLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDIn0=