'use strict';
import mongoose from 'mongoose';
import dbConnector, { BaseSchemaDef } from 'src/db/databaseConnector.js';
import errorCreator from 'src/error/errorCreator.js';
const teamSchema = new mongoose.Schema({
    ...BaseSchemaDef,
    teamName: {
        type: String,
        unique: true,
    },
    shortName: {
        type: String,
        unique: true,
    },
    teamNameLowerCase: {
        type: String,
        unique: true,
    },
    shortNameLowerCase: {
        type: String,
        unique: true,
    },
    isVerified: {
        type: Boolean,
        default: false,
    },
    isProtected: {
        type: Boolean,
        default: false,
    },
    members: {
        type: [String],
        default: [],
    },
    image: dbConnector.imageSchema,
    locationName: String,
    isPermissionsOnly: {
        type: Boolean,
        default: false,
    },
}, { collection: 'teams' });
export const Team = mongoose.model('Team', teamSchema);
async function updateObject({ teamId, update, }) {
    const { error, data } = await dbConnector.updateObject({
        update,
        query: { _id: teamId },
        object: Team,
        errorNameContent: 'updateTeam',
    });
    if (error) {
        return { error };
    }
    return { data: { team: data?.object } };
}
async function getTeams({ query, filter, }) {
    const { error, data } = await dbConnector.getObjects({
        query,
        filter,
        object: Team,
    });
    if (error) {
        return { error };
    }
    return {
        data: {
            teams: data?.objects,
        },
    };
}
async function getTeam({ query, }) {
    const { error, data } = await dbConnector.getObject({
        query,
        object: Team,
    });
    if (error) {
        return { error };
    }
    if (!data.object) {
        return { error: new errorCreator.DoesNotExist({ name: `team ${JSON.stringify(query, null, 4)}` }) };
    }
    return { data: { team: data.object } };
}
async function doesTeamExist({ teamName, shortName, }) {
    if (!teamName && !shortName) {
        return { data: { exists: false, object: null } };
    }
    const query = {};
    if (teamName && shortName) {
        query.$or = [
            { shortNameLowerCase: shortName.toLowerCase() },
            { teamNameLowerCase: teamName.toLowerCase() },
        ];
    }
    else if (teamName) {
        query.teamNameLowerCase = teamName.toLowerCase();
    }
    else {
        query.shortNameLowerCase = shortName.toLowerCase();
    }
    return dbConnector.doesObjectExist({
        query,
        object: Team,
    });
}
async function createTeam({ team, }) {
    const { error, data } = await doesTeamExist({
        teamName: team.teamName,
        shortName: team.shortName,
    });
    if (error) {
        return { error };
    }
    if (data?.exists) {
        return { error: new errorCreator.AlreadyExists({ name: `team ${team.teamName} ${team.shortName}` }) };
    }
    const teamToSave = team;
    teamToSave.teamNameLowerCase = teamToSave.teamName?.toLowerCase();
    teamToSave.shortNameLowerCase = teamToSave.shortName?.toLowerCase();
    const { error: saveError, data: saveData } = await dbConnector.saveObject({
        object: Team,
        objectData: team,
        objectType: 'team',
    });
    if (saveError) {
        return { error: saveError };
    }
    return { data: { team: saveData.savedObject } };
}
async function updateTeam({ teamId, team, options = {}, }) {
    const { teamName, shortName, ownerAliasId, isVerified, isProtected, isPermissionsOnly, } = team;
    const { resetOwnerAliasId } = options;
    const update = {};
    const set = {};
    const unset = {};
    const updateCallback = () => {
        return updateObject({
            update,
            teamId,
        });
    };
    if (resetOwnerAliasId) {
        unset.ownerAliasId = '';
    }
    else if (ownerAliasId) {
        set.ownerAliasId = ownerAliasId;
    }
    if (typeof isVerified === 'boolean') {
        set.isVerified = isVerified;
    }
    if (typeof isProtected === 'boolean') {
        set.isProtected = isProtected;
    }
    if (typeof isPermissionsOnly === 'boolean') {
        set.isPermissionsOnly = isPermissionsOnly;
    }
    if (teamName) {
        set.teamName = teamName;
        set.teamNameLowerCase = teamName.toLowerCase();
    }
    if (shortName) {
        set.shortName = shortName;
        set.shortNameLowerCase = shortName.toLowerCase();
    }
    if (Object.keys(set).length > 0) {
        update.$set = set;
    }
    if (Object.keys(unset).length > 0) {
        update.$unset = unset;
    }
    if (teamName || shortName) {
        const { data, error } = await doesTeamExist({
            shortName,
            teamName,
        });
        if (error) {
            return { error };
        }
        if (data.exists) {
            return { error: new errorCreator.AlreadyExists({ name: `teamName ${teamName} ${shortName}` }) };
        }
        return updateCallback();
    }
    return updateCallback();
}
async function getTeamsByUser({ user, includeInactive, }) {
    const query = dbConnector.createUserQuery({ user });
    if (!includeInactive) {
        query.isVerified = true;
    }
    return getTeams({
        query,
    });
}
async function getTeamById({ teamId, }) {
    return getTeam({
        query: { _id: teamId },
    });
}
async function verifyTeam({ teamId, }) {
    return updateTeam({
        teamId,
        team: { isVerified: true },
    });
}
async function addTeamMembers({ memberIds, teamId, }) {
    return updateObject({
        teamId,
        update: { $addToSet: { members: { $each: memberIds } } },
    });
}
async function removeTeamMembers({ memberIds, teamId, }) {
    return updateObject({
        teamId,
        update: { $pull: { members: { $in: memberIds } } },
    });
}
export default {
    createTeam,
    getTeamsByUser,
    updateTeam,
    getTeamById,
    verifyTeam,
    addTeamMembers,
    removeTeamMembers,
};
//# sourceMappingURL=data:application/json;base64,