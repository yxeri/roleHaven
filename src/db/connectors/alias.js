'use strict';
import { ObjectId } from 'mongodb';
import mongoose from 'mongoose';
import errorCreator from '../../error/errorCreator.js';
import dbConnector, { BaseSchemaDef } from '../databaseConnector.js';
import dbUser from './user.js';
const aliasSchema = new mongoose.Schema({
    ...BaseSchemaDef,
    aliasName: {
        type: String,
        unique: true,
    },
    aliasNameLowerCase: {
        type: String,
        unique: true,
    },
    image: dbConnector.imageSchema,
    partOfTeams: {
        type: [String],
        default: [],
    },
    followingRooms: {
        type: [String],
        default: [],
    },
    description: {
        type: [String],
        default: [],
    },
    pronouns: [String],
    customFields: [dbConnector.customFieldSchema],
    isVerified: {
        type: Boolean,
        default: true,
    },
    isBanned: {
        type: Boolean,
        default: false,
    },
}, { collection: 'aliases' });
const Alias = mongoose.model('Alias', aliasSchema);
async function updateObject({ aliasId, update, }) {
    const { data, error } = await dbConnector.updateObject({
        update,
        query: { _id: aliasId },
        object: Alias,
        errorNameContent: 'updateAlias',
    });
    if (error) {
        return { error };
    }
    return { data: { alias: data?.object } };
}
async function getAliases({ filter, query, }) {
    const { data, error } = await dbConnector.getObjects({
        query,
        filter,
        object: Alias,
    });
    if (error) {
        return { error };
    }
    return { data: { aliases: data?.objects } };
}
async function getAlias({ query, }) {
    const { data, error } = await dbConnector.getObject({
        query,
        object: Alias,
    });
    if (error) {
        return { error };
    }
    if (!data?.object) {
        return { error: new errorCreator.DoesNotExist({ name: `alias ${JSON.stringify(query, null, 4)}` }) };
    }
    return { data: { alias: data.object } };
}
async function getAliasById({ aliasId, aliasName, }) {
    const query = aliasId
        ? { _id: aliasId }
        : { aliasName };
    return getAlias({
        query,
    });
}
async function doesAliasExist({ aliasName, }) {
    return dbConnector.doesObjectExist({
        query: { aliasNameLowerCase: aliasName.toLowerCase() },
        object: Alias,
    });
}
async function createAlias({ alias, options = {}, }) {
    const { data, error } = await dbUser.doesUserExist({
        username: alias.aliasName,
    });
    if (error) {
        return { error };
    }
    if (data?.exists) {
        return { error: new errorCreator.AlreadyExists({ name: `aliasName ${alias.aliasName}` }) };
    }
    const aliasToSave = alias;
    aliasToSave.aliasNameLowerCase = aliasToSave.aliasName.toLowerCase();
    if (options.setId && aliasToSave.objectId) {
        aliasToSave._id = new ObjectId(aliasToSave.objectId);
    }
    else {
        aliasToSave._id = new ObjectId();
    }
    const { error: saveError, data: saveData } = await dbConnector.saveObject({
        object: Alias,
        objectData: alias,
        objectType: 'alias',
    });
    if (saveError) {
        return { error: saveError };
    }
    const createdAlias = saveData.savedObject;
    const { error: updateError } = await dbUser.updateUser({
        userId: createdAlias.ownerId,
        user: { aliases: [createdAlias.objectId] },
    });
    if (updateError) {
        return { error: updateError };
    }
    return { data: { alias: createdAlias } };
}
async function updateAlias({ aliasId, alias, options = {}, }) {
    const { resetOwnerAliasId } = options;
    const { aliasName, ownerAliasId, isPublic, image, description, customFields, } = alias;
    const update = {};
    const set = {};
    const unset = {};
    if (resetOwnerAliasId) {
        unset.ownerAliasId = '';
    }
    else if (ownerAliasId) {
        set.ownerAliasId = ownerAliasId;
    }
    if (typeof isPublic === 'boolean') {
        set.isPublic = isPublic;
    }
    if (aliasName) {
        set.aliasName = aliasName;
        set.aliasNameLowerCase = aliasName.toLowerCase();
    }
    if (image) {
        set.image = image;
    }
    if (description) {
        set.description = description;
    }
    if (customFields) {
        set.customFields = customFields;
    }
    if (Object.keys(set).length > 0) {
        update.$set = set;
    }
    if (Object.keys(unset).length > 0) {
        update.$unset = unset;
    }
    if (aliasName) {
        const { error, data } = await dbUser.doesUserExist({
            username: aliasName,
        });
        if (error) {
            return { error };
        }
        if (data?.exists) {
            return { error: new errorCreator.AlreadyExists({ name: `username ${aliasName}` }) };
        }
        return updateObject({
            update,
            aliasId,
        });
    }
    return updateObject({
        update,
        aliasId,
    });
}
async function getAliasesByUser({ user, }) {
    const query = dbConnector.createUserQuery({ user });
    return getAliases({
        query,
    });
}
async function getAllAliases() {
    return getAliases({
        query: {},
    });
}
export default {
    Model: Alias,
    Schema: aliasSchema,
    createAlias,
    getAliasesByUser,
    updateAlias,
    doesAliasExist,
    getAliasById,
    getAllAliases,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbGlhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUNoQyxPQUFPLFlBQVksTUFBTSw2QkFBNkIsQ0FBQztBQUN2RCxPQUFPLFdBQVcsRUFBRSxFQUFjLGFBQWEsRUFBa0MsTUFBTSx5QkFBeUIsQ0FBQztBQUNqSCxPQUFPLE1BQXNCLE1BQU0sV0FBVyxDQUFDO0FBZS9DLE1BQU0sV0FBVyxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBYztJQUNuRCxHQUFHLGFBQWE7SUFDaEIsU0FBUyxFQUFFO1FBQ1QsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsSUFBSTtLQUNiO0lBQ0Qsa0JBQWtCLEVBQUU7UUFDbEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsSUFBSTtLQUNiO0lBQ0QsS0FBSyxFQUFFLFdBQVcsQ0FBQyxXQUFXO0lBQzlCLFdBQVcsRUFBRTtRQUNYLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUNkLE9BQU8sRUFBRSxFQUFFO0tBQ1o7SUFDRCxjQUFjLEVBQUU7UUFDZCxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDZCxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQ2QsT0FBTyxFQUFFLEVBQUU7S0FDWjtJQUNELFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNsQixZQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDN0MsVUFBVSxFQUFFO1FBQ1YsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsSUFBSTtLQUNkO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsSUFBSSxFQUFFLE9BQU87UUFDYixP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