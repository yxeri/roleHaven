'use strict';
import { ObjectId } from 'mongodb';
import mongoose from 'mongoose';
import dbConnector, { BaseSchemaDef } from 'src/db/databaseConnector.js';
import ErrorCreator from 'src/error/errorCreator.js';
import errorCreator from 'src/error/errorCreator.js';
export const walletSchema = new mongoose.Schema({
    ...BaseSchemaDef,
    amount: {
        type: Number,
        default: 0,
    },
    isProtected: {
        type: Boolean,
        default: false,
    },
}, { collection: 'wallets' });
const Wallet = mongoose.model('Wallet', walletSchema);
async function getWallets({ filter, query, errorNameContent = 'getWallets', }) {
    const { error, data } = await dbConnector.getObjects({
        query,
        filter,
        object: Wallet,
        errorNameContent,
    });
    if (error) {
        return { error };
    }
    return {
        data: {
            wallets: data?.objects,
        },
    };
}
async function getWallet({ query, }) {
    const { error, data } = await dbConnector.getObject({
        query,
        object: Wallet,
    });
    if (error) {
        return { error };
    }
    if (!data.object) {
        return { error: new errorCreator.DoesNotExist({ name: `wallet ${JSON.stringify(query, null, 4)}` }) };
    }
    return { data: { wallet: data.object } };
}
async function updateObject({ update, walletId, }) {
    const { error, data } = await dbConnector.updateObject({
        update,
        query: { _id: walletId },
        object: Wallet,
        errorNameContent: 'updateWallet',
    });
    if (error) {
        return { error };
    }
    if (!data?.object) {
        return { error: new ErrorCreator.DoesNotExist({ name: `Wallet ${walletId}` }) };
    }
    return { data: { wallet: data.object } };
}
async function getAllWallets() {
    return getWallets({
        query: {},
        errorNameContent: 'getAllWallets',
    });
}
async function getWalletsByTeams({ teamIds, }) {
    const query = {
        $or: [
            { ownerId: { $in: teamIds } },
            { teamIds: { $in: teamIds } },
        ],
    };
    return getWallets({
        query,
    });
}
async function getWalletsByUser({ user, noVisibility, }) {
    const query = dbConnector.createUserQuery({
        user,
        noVisibility,
    });
    return getWallets({
        query,
    });
}
async function createWallet({ wallet, options = {}, }) {
    const walletToSave = wallet;
    if (options.setId && walletToSave.objectId) {
        walletToSave._id = new ObjectId(walletToSave.objectId);
    }
    const { error, data } = await dbConnector.saveObject({
        object: Wallet,
        objectData: walletToSave,
        objectType: 'wallet',
    });
    if (error) {
        return { error };
    }
    return { data: { wallet: data.savedObject } };
}
async function updateWallet({ walletId, wallet, options = {}, }) {
    const { amount, ownerAliasId, visibility, accessLevel, isProtected, } = wallet;
    const { shouldDecreaseAmount, resetAmount, resetOwnerAliasId, } = options;
    const update = {};
    const set = {};
    const unset = {};
    if (typeof resetAmount === 'boolean' && resetAmount) {
        set.amount = 0;
    }
    else if (amount) {
        update.$inc = {};
        if (shouldDecreaseAmount) {
            update.$inc.amount = -Math.abs(amount);
        }
        else {
            update.$inc.amount = Math.abs(amount);
        }
    }
    if (resetOwnerAliasId) {
        unset.ownerAliasId = '';
    }
    else if (ownerAliasId) {
        set.ownerAliasId = ownerAliasId;
    }
    if (typeof isProtected === 'boolean') {
        set.isProtected = isProtected;
    }
    if (visibility) {
        set.visibility = visibility;
    }
    if (accessLevel) {
        set.accessLevel = accessLevel;
    }
    if (Object.keys(set).length > 0) {
        update.$set = set;
    }
    if (Object.keys(unset).length > 0) {
        update.$unset = unset;
    }
    return updateObject({
        update,
        walletId,
    });
}
async function removeWallet({ walletId, }) {
    return dbConnector.removeObject({
        query: { _id: walletId },
        object: Wallet,
    });
}
async function getWalletsByIds({ walletIds, }) {
    return getWallets({
        query: { _id: { $in: walletIds } },
    });
}
async function getWalletById({ walletId, }) {
    return getWallet({
        query: { _id: walletId },
    });
}
export default {
    createWallet,
    getAllWallets,
    getWalletsByUser,
    removeWallet,
    updateWallet,
    getWalletsByTeams,
    getWalletsByIds,
    getWalletById,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBRWhDLE9BQU8sV0FBVyxFQUFFLEVBQWMsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckYsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFPckQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBZTtJQUM1RCxHQUFHLGFBQWE7SUFDaEIsTUFBTSxFQUFFO1FBQ04sSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsS0FBSztLQUNmO0NBQ0YsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTlCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRXRELEtBQUssVUFBVSxVQUFVLENBQUMsRUFDeEIsTUFBTSxFQUNOLEtBQUssRUFDTCxnQkFBZ0IsR0FBRyxZQUFZLEdBS2hDO0lBQ0MsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUM7UUFDbkQsS0FBSztRQUNMLE1BQU07UUFDTixNQUFNLEVBQUUsTUFBTTtRQUNkLGdCQUFnQjtLQUNqQixDQUFDLENBQUM7SUFFSCxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxF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